using System;
using UnityEngine;
using System.IO;
using UnityEditor;

namespace REFU
{
    public class TypeFieldInfo
    {
        public bool mainKey;
        public string FieldName;
        public Type FieldType;
    }

    public class CodeGenerator
    {
        static string CodeGeneratePath { get { return Application.dataPath + "/REFUGenCodes/"; } }

        public static void CreateType(string SourcefileName, string typeName, TypeFieldInfo[] typeFields, string use_namespace = "")
        {
            string gen_path = CodeGeneratePath + SourcefileName + "/";
            //if (!string.IsNullOrEmpty(use_namespace))
            //{
            //    gen_path += use_namespace + "/";
            //}

            if (!Directory.Exists(gen_path))
                Directory.CreateDirectory(gen_path);

            using (var sw = File.CreateText(gen_path + typeName + ".cs"))
            {
                sw.WriteLine("/**** Auto-Generated By REFU,Don't Modify it Manually ****/");
                sw.WriteLine("using UnityEngine;\n" +
                    "using System.Collections.Generic;\n");

                if (!string.IsNullOrEmpty(use_namespace))
                {
                    sw.WriteLine("//Use Sourcefile Name as Namespace");
                    sw.WriteLine("namespace " + use_namespace + " {");
                }

                sw.WriteLine("//Generated by Sheet : " + typeName);
                sw.WriteLine("public class " + typeName + " : ScriptableObject {");

                TypeFieldInfo mainKey = null;       //主键
                foreach (var fieldInfo in typeFields)
                {
                    if (fieldInfo.FieldType != null
                        && fieldInfo.mainKey)
                    {
                        mainKey = fieldInfo;
                        //写入初始化 Key-Map 代码
                        sw.WriteLine("\n    //Auto-Generated Main Key Map Init");
                        sw.WriteLine("    [System.NonSerialized]");
                        sw.WriteLine("    bool inited = false;");
                        sw.WriteLine("    [System.NonSerialized]");
                        sw.WriteLine(string.Format("    Dictionary<{0},int> mainKeyMap = new Dictionary<{1},int>();", mainKey.FieldType, mainKey.FieldType));
                        sw.WriteLine("    public void InitKeyMap() {");
                        sw.WriteLine(string.Format("        if(inited) return;"));
                        //Debug.Log(string.Format("        for(int i=0;i<" + mainKey.FieldName + ".Length;i++) {"));
                        sw.WriteLine("        for(int i=0;i<" + mainKey.FieldName + ".Length;i++) {");
                        sw.WriteLine(string.Format("        if(!mainKeyMap.ContainsKey({0}[i]))", mainKey.FieldName));
                        sw.WriteLine(string.Format("            mainKeyMap.Add({0}[i],i);", mainKey.FieldName));
                        sw.WriteLine(string.Format("        inited = true;"));
                        sw.WriteLine("        }");
                        sw.WriteLine("    }\n");
                        break;
                    }
                }

                if (typeFields != null)
                {
                    foreach (var fieldInfo in typeFields)
                    {
                        if (fieldInfo.FieldType == null)
                        {
                            Debug.LogError("Can't Map Field Type : " + fieldInfo.FieldName + " by " + typeName);
                            continue;
                        }
                        sw.WriteLine(string.Format("    //Auto-Generated Field : {0}", fieldInfo.FieldName));
                        sw.WriteLine(string.Format("    public {0}[] {1};\n", fieldInfo.FieldType, fieldInfo.FieldName));
                        if (mainKey != null)
                        {
                            sw.WriteLine(string.Format("    //Auto-Generated Method : Get_{0}", fieldInfo.FieldName));
                            sw.WriteLine(string.Format("    public {0} Get_{1}({2} mainKey)", fieldInfo.FieldType, fieldInfo.FieldName, mainKey.FieldType));
                            sw.WriteLine("    {");
                            sw.WriteLine(string.Format("        InitKeyMap();"));
                            sw.WriteLine(string.Format("        if(!mainKeyMap.ContainsKey(mainKey))"));
                            sw.WriteLine(string.Format("            return default;"));
                            sw.WriteLine(string.Format("        var idx = mainKeyMap[mainKey];"));
                            sw.WriteLine(string.Format("        return {0}[idx];", fieldInfo.FieldName));
                            sw.WriteLine("    }\n");
                        }
                    }
                }
                sw.WriteLine("}");


                if (!string.IsNullOrEmpty(use_namespace))
                    sw.WriteLine("}");

                sw.Flush();
            }

            AssetDatabase.Refresh();
        }
    }
}
